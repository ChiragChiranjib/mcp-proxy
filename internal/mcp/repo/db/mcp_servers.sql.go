// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: mcp_servers.sql

package db

import (
	"context"
)

const getMcpServer = `-- name: GetMcpServer :one
SELECT id, name, url, description, created_at, updated_at FROM mcp_servers WHERE id = ? LIMIT 1
`

func (q *Queries) GetMcpServer(ctx context.Context, id string) (McpServer, error) {
	row := q.db.QueryRowContext(ctx, getMcpServer, id)
	var i McpServer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCatalogServers = `-- name: ListCatalogServers :many
SELECT id, name, url, description, created_at, updated_at FROM mcp_servers ORDER BY name
`

func (q *Queries) ListCatalogServers(ctx context.Context) ([]McpServer, error) {
	rows, err := q.db.QueryContext(ctx, listCatalogServers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []McpServer
	for rows.Next() {
		var i McpServer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
