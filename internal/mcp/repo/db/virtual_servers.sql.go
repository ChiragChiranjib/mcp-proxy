// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: virtual_servers.sql

package db

import (
	"context"
)

const addVirtualServerTool = `-- name: AddVirtualServerTool :exec
INSERT INTO tools_virtual_servers (mcp_virtual_server_id, tool_id) VALUES (?, ?)
`

type AddVirtualServerToolParams struct {
	McpVirtualServerID string
	ToolID             string
}

func (q *Queries) AddVirtualServerTool(ctx context.Context, arg AddVirtualServerToolParams) error {
	_, err := q.db.ExecContext(ctx, addVirtualServerTool, arg.McpVirtualServerID, arg.ToolID)
	return err
}

const createVirtualServer = `-- name: CreateVirtualServer :exec
INSERT INTO mcp_virtual_servers (id, user_id, status) VALUES (?, ?, ?)
`

type CreateVirtualServerParams struct {
	ID     string
	UserID string
	Status string
}

func (q *Queries) CreateVirtualServer(ctx context.Context, arg CreateVirtualServerParams) error {
	_, err := q.db.ExecContext(ctx, createVirtualServer, arg.ID, arg.UserID, arg.Status)
	return err
}

const deleteVirtualServer = `-- name: DeleteVirtualServer :exec
DELETE FROM mcp_virtual_servers WHERE id = ?
`

func (q *Queries) DeleteVirtualServer(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteVirtualServer, id)
	return err
}

const listToolsForVirtualServer = `-- name: ListToolsForVirtualServer :many
SELECT t.id, t.user_id, t.original_name, t.modified_name, t.mcp_hub_server_id, t.input_schema, t.annotations, t.status, t.created_at, t.updated_at
FROM tools_virtual_servers v
JOIN mcp_tools t ON t.id = v.tool_id
WHERE v.mcp_virtual_server_id = ? AND t.status = 'ACTIVE'
`

func (q *Queries) ListToolsForVirtualServer(ctx context.Context, mcpVirtualServerID string) ([]McpTool, error) {
	rows, err := q.db.QueryContext(ctx, listToolsForVirtualServer, mcpVirtualServerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []McpTool
	for rows.Next() {
		var i McpTool
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OriginalName,
			&i.ModifiedName,
			&i.McpHubServerID,
			&i.InputSchema,
			&i.Annotations,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listVirtualServersForUser = `-- name: ListVirtualServersForUser :many
SELECT id, user_id, status, created_at, updated_at FROM mcp_virtual_servers WHERE user_id = ? ORDER BY created_at DESC
`

func (q *Queries) ListVirtualServersForUser(ctx context.Context, userID string) ([]McpVirtualServer, error) {
	rows, err := q.db.QueryContext(ctx, listVirtualServersForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []McpVirtualServer
	for rows.Next() {
		var i McpVirtualServer
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const replaceVirtualServerTools = `-- name: ReplaceVirtualServerTools :exec
DELETE FROM tools_virtual_servers WHERE mcp_virtual_server_id = ?
`

func (q *Queries) ReplaceVirtualServerTools(ctx context.Context, mcpVirtualServerID string) error {
	_, err := q.db.ExecContext(ctx, replaceVirtualServerTools, mcpVirtualServerID)
	return err
}

const updateVirtualServerStatus = `-- name: UpdateVirtualServerStatus :exec
UPDATE mcp_virtual_servers SET status = ? WHERE id = ?
`

type UpdateVirtualServerStatusParams struct {
	Status string
	ID     string
}

func (q *Queries) UpdateVirtualServerStatus(ctx context.Context, arg UpdateVirtualServerStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateVirtualServerStatus, arg.Status, arg.ID)
	return err
}
