// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: hub.sql

package db

import (
	"context"
	"encoding/json"
)

const addHubServer = `-- name: AddHubServer :exec
INSERT INTO mcp_hub_servers (id, user_id, mcp_server_id, status, transport, capabilities, auth_type, auth_value)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type AddHubServerParams struct {
	ID           string
	UserID       string
	McpServerID  string
	Status       string
	Transport    string
	Capabilities json.RawMessage
	AuthType     string
	AuthValue    json.RawMessage
}

func (q *Queries) AddHubServer(ctx context.Context, arg AddHubServerParams) error {
	_, err := q.db.ExecContext(ctx, addHubServer,
		arg.ID,
		arg.UserID,
		arg.McpServerID,
		arg.Status,
		arg.Transport,
		arg.Capabilities,
		arg.AuthType,
		arg.AuthValue,
	)
	return err
}

const deleteHubServer = `-- name: DeleteHubServer :exec
DELETE FROM mcp_hub_servers WHERE id = ?
`

func (q *Queries) DeleteHubServer(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteHubServer, id)
	return err
}

const getHubServer = `-- name: GetHubServer :one
SELECT id, user_id, mcp_server_id, status, transport, capabilities, auth_type, auth_value, created_at, updated_at
FROM mcp_hub_servers WHERE id = ? LIMIT 1
`

func (q *Queries) GetHubServer(ctx context.Context, id string) (McpHubServer, error) {
	row := q.db.QueryRowContext(ctx, getHubServer, id)
	var i McpHubServer
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.McpServerID,
		&i.Status,
		&i.Transport,
		&i.Capabilities,
		&i.AuthType,
		&i.AuthValue,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getHubServerWithURL = `-- name: GetHubServerWithURL :one
SELECT hs.id,
       hs.user_id,
       hs.mcp_server_id,
       hs.status,
       hs.transport,
       hs.capabilities,
       hs.auth_type,
       hs.auth_value,
       s.url AS server_url,
       s.name AS server_name
FROM mcp_hub_servers hs
JOIN mcp_servers s ON s.id = hs.mcp_server_id
WHERE hs.id = ?
LIMIT 1
`

type GetHubServerWithURLRow struct {
	ID           string
	UserID       string
	McpServerID  string
	Status       string
	Transport    string
	Capabilities json.RawMessage
	AuthType     string
	AuthValue    json.RawMessage
	ServerUrl    string
	ServerName   string
}

func (q *Queries) GetHubServerWithURL(ctx context.Context, id string) (GetHubServerWithURLRow, error) {
	row := q.db.QueryRowContext(ctx, getHubServerWithURL, id)
	var i GetHubServerWithURLRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.McpServerID,
		&i.Status,
		&i.Transport,
		&i.Capabilities,
		&i.AuthType,
		&i.AuthValue,
		&i.ServerUrl,
		&i.ServerName,
	)
	return i, err
}

const listUserHubServers = `-- name: ListUserHubServers :many
SELECT id, user_id, mcp_server_id, status, transport, capabilities, auth_type, auth_value, created_at, updated_at
FROM mcp_hub_servers WHERE user_id = ? ORDER BY created_at DESC
`

func (q *Queries) ListUserHubServers(ctx context.Context, userID string) ([]McpHubServer, error) {
	rows, err := q.db.QueryContext(ctx, listUserHubServers, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []McpHubServer
	for rows.Next() {
		var i McpHubServer
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.McpServerID,
			&i.Status,
			&i.Transport,
			&i.Capabilities,
			&i.AuthType,
			&i.AuthValue,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHubServerStatus = `-- name: UpdateHubServerStatus :exec
UPDATE mcp_hub_servers SET status = ? WHERE id = ?
`

type UpdateHubServerStatusParams struct {
	Status string
	ID     string
}

func (q *Queries) UpdateHubServerStatus(ctx context.Context, arg UpdateHubServerStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateHubServerStatus, arg.Status, arg.ID)
	return err
}
