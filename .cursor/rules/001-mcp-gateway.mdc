---
alwaysApply: false
---
# Tech Concept Note - Global MCP Server

```
Author/s: Chirag Chiranjib
Team/Pod: DevEx
Published Date: 30th July, 2025
```
```
Reviewer Name Reviewed Date Status
```
```
Nikhilesh Chamarthi Under review
```
```
Harshit Rathi Under review
```
```
Kaushik Bhat Under review
```
###### Table of Contents

**1. Problem Statement 2
2. Scope 2**
    2.1. Relevant Resources 2
**4. Assumptions, Goals & Non-Goals 2**
    4.1. Assumptions 2
    4.2. Goals 3
       4.2.1 Functional 3
       4.2.2 Non-functional 3
    4.3. Non-Goals 3
**5. Proposal 4**
    5.1. Architecture 4
       User Journey: Building a Virtual MCP Server 4
    5.2. Database Schema 6
    5.3. Design Panels 7
       1. MCP Servers Catalogue (The Discovery Hub) 7
       2. MCP Hub Panel (Your Personalized Server Command Center) 8
       3. MCP Tools Panel (Your Unified Tool Inventory) 8
       4. MCP Virtual Servers Panel (Your Custom Tool Compositions) 9
**6. API Contracts 10
7. Open Discussion 10**

## üí° Note

```
Read following docs to get expert on different topics -
‚óè Format and Structure Your Doc
‚óè How to document code in Google Doc
‚óè API Design Guide
‚óè Put Google Doc in Presentation Mode
```
```
Full Reading List - Link
```

### 1. Problem Statement

This Technical Specification details the design and functionality of the **Global MCP Server** , an
internal unified platform that enables developers to aggregate tools from multiple MCP Servers
and expose them as a single, consolidated MCP Server. This allows for seamless integration
with any MCP Host, such as Cursor IDE, OpenAI Playground, Claude Desktop, and others.

The Global MCP Server addresses a key limitation in existing MCP workflows: when developers
connect to multiple MCP Servers individually, the context window becomes cluttered with tool
definitions and parameter metadata. This often results in increased hallucinations, particularly
as the number of tools grows. By centralizing tool access, the Global MCP Server minimizes
context bloat, enhancing both tool invocation accuracy and overall developer experience.

Additionally, this unified interface will act as a central registry for all available MCP Servers
within Razorpay, providing a single point of discovery and access.

### 2. Scope

#### 2.1. Relevant Resources

MCP Latest Specification: Specification - Model Context Protocol

Open Source Implementations:
https://github.com/IBM/mcp-context-forge
https://github.com/samanhappy/mcphub

### 3. Out of Scope

```
‚óè This technical specification mainly focuses on building an unified platform for all MCP
servers hosted internally in razorpay doesn‚Äôt focus on client side features such as roots,
elicitation and sampling as of now for the MCP Servers connected to it. The only server
side functionality that the Global MCP Server will support is tools call.
```
```
‚óè Rate limiting of tool/prompt/resource calls for the MCP Servers
```
### 4. Assumptions, Goals & Non-Goals

#### 4.1. Assumptions

This technical specification is based on the following assumptions while outlining the
approaches,

```
‚óè All the MCP Servers which will be integrated with the Global MCP Server will be
supporting streamable HTTP and stateless architecture.
‚óè Since the entire infra will be hosted internally, for the sake of simplicity, we won‚Äôt be
implementing the Authorization flow mentioned in the official Model Context Protocol
RFC.
‚óè The Global MCP Server will be remotely hosted, hence will only support remote MCP
Servers.
```

#### 4.2. Goals

##### 4.2.1 Functional

These describe the features and capabilities the system _must_ have.

```
‚óè Tool Aggregation and Consolidation:
```
```
‚óã Provide a unified interface that acts as a single point of discovery and access for
tools aggregated from all registered internal MCP Servers.
‚óã Enable users to onboard internal MCP Servers into their personal workspace,
referred to as the MCP Hub.
‚óã Allow users to create their own custom MCP Servers ( Virtual MCP Servers ) by
dynamically selecting and composing tools from the MCP Servers they‚Äôve
registered within their MCP Hub.
‚óã Support on-demand fetching and consolidation of tool definitions, including tool
names, descriptions, and parameter metadata from all connected MCP Servers.
‚óã Implement logic to resolve naming conflicts or ambiguities when tools with
identical names exist across different MCP Servers, ensuring consistency and
clarity in tool access.
```
```
‚óè Centralized Discovery and Registry:
‚óã Act as a central registry for all available internal MCP Servers within Razorpay.
```
```
‚óè Seamless Integration with MCP Hosts:
‚óã Be fully compliant with the Model Context Protocol Specification to ensure
interoperability with various MCP Hosts (e.g., Cursor IDE, OpenAI Playground,
Claude Desktop) for the virtual MCP Servers.
‚óã Support MCP tool call server side functionality for all the virtual MCP Servers
```
```
‚óè Tool Invocation Proxying:
‚óã Proxy tool invocation requests from MCP Hosts to the correct underlying MCP
Server based on the invoked tool's origin.
‚óã Forward responses from the underlying MCP Servers back to the MCP Host.
```
##### 4.2.2 Non-functional

**Performance:**

```
‚óè Minimize overhead introduced by the aggregation layer compared to direct MCP Server
connections. The aggregation overhead should not be more than 50ms.
```
**Scalability:**

```
‚óè Be capable of registering and aggregating tools from an increasing number of internal
MCP Servers without significant performance degradation.
```
**Reliability & Availability:**

```
‚óè Ensure high availability of the Global MCP Server to prevent disruption to developer
workflows.
‚óè Gracefully handle failures or unavailability of individual underlying MCP Servers (e.g., by
indicating which tools are currently unavailable).
```
#### 4.3. Non-Goals

```
‚óè Role-Based Access Control (RBAC) for Tools: Displaying tools/ MCP Servers to
users based on their assigned roles, ensuring access is restricted to only the relevant
```

```
functionality will not be supported in this phase.
```
```
‚óè Find the best tools for the user prompt: Finding the best tool from all the MCP
Servers available for the user prompt with the use of vector embeddings will not be
supported by the global MCP Server as of now.
```
```
‚óè Advanced Tool Orchestration/Composition: Providing capabilities for chaining
multiple tools, creating complex workflows, or dynamically composing new tools from
existing ones within the Global MCP Server itself. This complexity is delegated to the
MCP Host as of now and won‚Äôt be taken up in the Global MCP Server.
```
```
‚óè Public Exposure: The Global MCP Server will not be exposed to the public internet. It is
intended for internal Razorpay use only.
```
```
‚óè Comprehensive Monitoring beyond Server Health: While basic server health metrics
will be collected, detailed analytics on tool usage, specific tool invocation failures within
the proxied request , or performance metrics per tool will not be a primary focus in this
initial phase.
```
```
‚óè Migration of Existing MCP Servers: The Global MCP Server will not be responsible for
migrating or updating existing internal MCP Servers to conform to new specifications or
introduce new functionalities. It will integrate with them as they are.
```
### 5. Proposal

#### 5.1. Architecture

###### User Journey: Building a Virtual MCP Server

1. **Login & Identification**
    The user logs into the platform using **Google SSO**. This login uniquely identifies the
    user and links them to their personal **MCP Hub**.
2. **Adding MCP Servers**


```
JSON
```
```
‚óè The user can browse MCP Servers in the Catalogue Page and add internal MCP
Servers to their MCP Hub. Each added server is persisted and linked to the
user‚Äôs account.
‚óã For servers that require an authorization token , the user will be
prompted to provide the token before the MCP Server can be successfully
added to their MCP Hub.
‚óã These authorization tokens, will be on the granularity of user_id <>
server_id and will be stored in DB with AES Encryption.
```
```
‚óè The internal MCP Servers will be registered with the MCP Gateway and will be
loaded at the time of the build.
```
3. **Viewing Available Tools**
    Once an MCP Server is added to MCP Hub, **all tools from that server** are
    automatically fetched and displayed in the **MCP Tools Panel** panel within the user‚Äôs
    MCP Hub.
4. **Creating a Virtual MCP Server**
    The user can then choose to **create a virtual MCP Server** by selecting tools from the
    consolidated list of available tools across all MCP Servers they‚Äôve added.
5. **Virtual Server Creation**
    Upon clicking **‚ÄúCreate a New Virtual Server‚Äù** , the platform provisions a new virtual
    MCP Server instance and assigns it a unique **virtual_server_id**.

Once the **virtual_server_id** is generated, the user can configure their Cursor IDE with the
corresponding URL to access all tools associated with the virtual MCP Server.

```
{
"mcpServers": {
"virtual-mcp-server-remote": {
"command": "npx",
"args": [
"mcp-remote",
```
```
"http://mcp-gateway.razorpay.com/servers/<virtual_server_id>/mcp"
]
}
}
}
```

#### 5.2. Database Schema

Ref: https://dbdiagram.io/d/68878a30cca18e685c

```
‚óè MCP Servers Catalogue
‚óã It will read from a json file and show all the available MCP Servers for the users
to add to their MCP Hub.
```
```
‚óè MCP Hub Panel Functionality - (Will be sub part of the MCP Catalogue page)
‚óã Users can add MCP Servers into the Hub from the MCP Catalogue, they can add
authorization type and value if the MCP needs auth for tool calling. We will
support authorization types to be these three types: none, bearer token and
Custom Headers.
‚óã Users can refresh the MCP Servers that they have added.
‚ñ† Refresh should update the MCP Tools of the MCP Server.
‚ñ† Dedupe will be done on the MCP Tool Names, if any tool is deleted or
added, the same should reflect in the DB.
‚ñ† If the refresh fails due to the failure of (ping, initialize and notification
initialize calls, then the status of the MCP Server will be updated to
UNREACHABLE ).
( IMP: We won‚Äôt be changing states of tools in this case to maintain
simplicity)
‚ñ† Any change in Tool description, input schema, will not be updated,
it's recommended, to delete the MCP server and create it once again.
We can eventually provide an option for Deep Refresh for better
developer experience.
‚óã Users will have an option to ping the MCP Server to check if it's working.
(Optional) - If ping fails, we won‚Äôt update the MCP Server status.
‚óã Users can deactivate the MCP Server
‚ñ† Cascade the deactivation to tools as well.
```

```
‚óã Users can delete the MCP Server, it will also delete the corresponding MCP
Tools as a cascaded operation
‚óã MCP Hub will have dedupe on the name of the parent MCP Server.
‚óè MCP Tools Panel
‚óã Tools will be shown to which MCP Server in the MCP Hub they belong to
‚óã Tools can be deactivated manually by the users as well.
‚óè MCP Virtual Servers Panel
‚óã Users should be able to create virtual Servers with tools from the MCP Hub
visible for selection
‚óã Users can deactivate/ delete the Virtual Server. Deletion will cascade the deletion
of the pivot entries as well.
```
The MCP Gateway will be supporting list tools and call tool functionality along with initialize,
ping and notifications-initialised functionality in line with the MCP Specification.

```
‚óè Tools/list functionality :
‚óã Calls from MCP Hosts for the listing of tools functionality will serve all the tools for
the virtual MCP Server
‚ñ† Pre requisites:
‚óè The virtual MCP Server should be active
‚ñ† Fetch all the tools which are active from the Pivot table, convert the tool
models into MCP JSON RPC responses and send them back.
‚óè Tools/Call functionality
‚óã Validate the tool belongs to the Virtual MCP Server
‚ñ† The virtual MCP Server should be active
‚ñ† Join on pivot table + mcp_tools table, with filter on tool name
‚ñ† Tool Status should be active
‚ñ† Get the url and auth details from the MCP Hub Server
‚ñ† Invoke tool call to the MCP Server with an MCP Client
```
#### 5.3. Design Panels

##### 1. MCP Servers Catalogue (The Discovery Hub)

**Concept:** This is where users find and onboard new MCP Servers. Think of it like an app store
for internal tools.

**Visuals & Layout:**

```
‚óè Hero Section/Banner: A prominent heading: "Discover & Add MCP Servers to Your
Hub." Maybe a subtle background graphic featuring network connections or server
racks.
‚óè Search & Filter Bar: At the top, a clear search bar "Search MCP Servers..." with filters
like:
‚óã "Available to Add" (default)
‚óã "My Added Servers" (to quickly jump to their hub)
```
```
‚óè Server Cards/Tiles: Each available MCP Server is presented as a card or tile.
‚óã Header: [Server Name] (e.g., "AI Model Toolkit," "Data Science Utilities," "Internal
Dev Tools")
‚óã URL: A smaller, faded text of the URL (e.g., https://ai-tools.razorpay.com)
‚óã Description: A concise, well-formatted description of what tools this server offers
(e.g., "Provides a suite of NLP models for text analysis and generation.",
"Comprehensive financial calculation tools and reporting APIs.")
‚óã Status Indicator: If already added, a small "Added" badge.
```

```
‚óã Action Button: A prominent "Add to Hub" button. If already added, it becomes a
"View in Hub" or "Manage" button.
```
**User Flow Imagination:**

1. The user lands on the page, looking for a specific type of tool.
2. They scan the attractive server cards, reading descriptions.
3. They see "E2E MCP Server" and like the description. They click "Add to Hub."
4. A modal pops up asking for authorization details if needed (None, Bearer Token, Custom
    Headers with fields for key/value pairs).
5. After successful addition, the card changes to "View in Hub," and the user feels they've
    successfully integrated a new resource.

##### 2. MCP Hub Panel (Your Personalized Server Command Center)

**Concept:** This is the user's personal dashboard for the MCP Servers they've added. It's about
control, status, and quick actions.

**Visuals & Layout:**

```
‚óè Clear Section Title: "Your MCP Hub" or "My Connected MCP Servers."
‚óè Server List/Cards (Grid or List View): Each added MCP Server gets its own dedicated
section or detailed card.
‚óã Server Header: [Server Name] (Prominent), [URL] (smaller).
‚óã Authorization Type: Clearly displayed (e.g., "Auth: Bearer Token", "Auth:
None").
‚óã Status Badge: Dynamic and visually distinct (e.g., "ACTIVE" - Green,
"UNREACHABLE" - Red, "DEACTIVATED" - Grey).
‚óã Action Buttons (Primary Row):
‚ñ† "Refresh" Button: (Icon: Circular arrows) Triggers the tool update. Could
have a small loading spinner during the process.
‚ñ† "Ping" Button: (Icon: Signal waves) Provides immediate feedback on
connectivity without changing overall status. A small notification would
pop up: "Ping successful!" or "Ping failed."
‚ñ† "Deactivate" / "Activate" Toggle/Button: (Icon: Power button) Changes
the server's operational status. A confirmation modal for deactivation
("Are you sure? This will deactivate all associated tools.").
‚ñ† "Delete" Button: (Icon: Trash can) A prominent, potentially red, button,
requiring strong confirmation ("Type 'DELETE' to confirm" or similar).
‚óã Tools: Clicking on this icon, shows all the tools for this MCP Server.
```
**User Flow Imagination:**

1. The user sees an MCP Server listed as "UNREACHABLE."
2. They click "Ping" to quickly check connectivity. "Ping failed!"
3. They click "Refresh" hoping it's a transient issue. The status changes to "Refreshing..."
4. If still unreachable, the status reverts to "UNREACHABLE."
5. The user decides to temporarily disable it. They click "Deactivate." A modal confirms the
    cascade. The status changes to "DEACTIVATED." All tools associated are greyed out or
    hidden from other panels.

##### 3. MCP Tools Panel (Your Unified Tool Inventory)

**Concept:** A comprehensive list of all _active_ tools available through the MCP Hub, showing their
origin.


**Visuals & Layout:**

```
‚óè Clear Section Title: "All Available Tools" or "Your MCP Hub Tools."
‚óè Filters/Sorting:
‚óã "Filter by MCP Server:" (Dropdown to select a specific server).
‚óã Search bar for tool names.
‚óã Sort by Name, Server, Status. (Active status comes first, FE Logic)
‚óè Tool List (Table or Cards): Each row/card represents a single tool.
‚óã Tool Name: Prominent.
‚óã Description: Short snippet, perhaps expandable for full details.
‚óã Belongs To: [MCP Server Name]
‚óã Status: "Active" (Green) / "Deactivated" (Grey).
‚óã Action: "Deactivate" / "Activate" Toggle.
‚óã Input Schema (Optional): A small "View Schema" button that opens a modal
with the JSON schema, or a tooltip on hover. (Remember: schema changes
aren't auto-updated, so this is just for viewing).
```
**User Flow Imagination:**

1. The user needs a "summarization" tool. They go to the Tools Panel.
2. They type "summarization" into the search bar.
3. Two tools appear: "Text Summarizer" (from AI Model Toolkit) and "Document
    Summarizer" (from Content Generators).
4. They can see which server each belongs to.
5. They realize "Document Summarizer" is no longer relevant for their work and click its
    "Deactivate" toggle. The tool is now greyed out and marked "Deactivated." It will no
    longer appear when creating Virtual Servers or be callable.

##### 4. MCP Virtual Servers Panel (Your Custom Tool Compositions)

**Concept:** This is where users build and manage their bespoke collections of tools, ready for
consumption by MCP Hosts.

**Visuals & Layout:**

```
‚óè Clear Section Title: "Your Virtual MCP Servers."
‚óè "Create New Virtual Server" Button: A prominent button to initiate the creation
process.
‚óè Virtual Server Cards/List: Each card represents a custom virtual server.
```
1. **Virtual Server Name:** Large and prominent.
2. **Status:** "Active" (Green) / "Deactivated" (Grey).
3. **User ID:** (Implicit, but useful for admin views, if applicable).
4. **Tool Count:** "Contains X Tools" (e.g., "Contains 12 Tools").
5. **Action Buttons:**
    ‚ñ† **"Manage Tools" / "Edit" Button:** (Icon: Pencil) Takes them to a
       dedicated editing screen to add/remove tools from _this_ virtual server.
    ‚ñ† **"Deactivate" / "Activate" Toggle/Button:** (Icon: Power button) Changes
       the virtual server's operational status. Confirmation modal.
    ‚ñ† **"Delete" Button:** (Icon: Trash can) Red, strong confirmation needed.
6. **Endpoint URL:** A prominent, easily copyable URL for the Virtual Server endpoint
    (e.g., https://gateway.razorpay.com/virtual/my-nlp-server). A "Copy to Clipboard"
    icon next to it.
‚óè **Virtual Server Creation Flow (Multi-Step Modal/Page):**
1. **Step 1: Name & Description:** User provides a unique name and optional
description for the Virtual Server.
2. **Step 2: Select Tools:**


```
‚ñ† Left Pane: A searchable, filterable list of all active tools from the MCP
Hub (similar to the MCP Tools Panel, but maybe simplified for selection).
Each tool shows its name and source MCP Server.
‚ñ† Right Pane: A "Selected Tools" basket/list. Users drag-and-drop or click
to move tools from left to right.
‚ñ† Tool Count Display: "Selected: X/50 tools."
```
3. **Step 3: Review & Create:** Summary of the virtual server details and selected
    tools. "Create Virtual Server" button.

**User Flow Imagination:**

1. User clicks "Create New Virtual Server."
2. They name it "My Dev Helper" and add a description.
3. They go to "Select Tools." They search for "code" and drag "Code Formatter" (from Dev
    Utils) and "Linter" (from AI Code Assistant) into their selected list.
4. They search for "deploy" and select "One-Click Deploy" (from CI/CD Tools).
5. They notice the "50 tools" limit and are mindful of it.
6. They click "Create." The new "My Dev Helper" virtual server appears on their panel with
    its unique endpoint.
7. They copy the endpoint and paste it into their Cursor IDE.

## 6. API Contracts

```
MCP Gateway API Contract [WIP]
```
## 7. Open Discussion


